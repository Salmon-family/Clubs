plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "kotlin-kapt"
    id 'dagger.hilt.android.plugin'
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))


android {
    namespace 'com.thechance.clubs'
    compileSdk 33

    defaultConfig {
        applicationId "com.thechance.clubs"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "API_KEY", localProperties['apiKey']
        buildConfigField "String", "BASE_URL", "\"https://club.the-chance.org/api/v1.0/\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.3.1"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    //region core
    api(project(":core:ui"))
    api(project(":core:remote"))
    api(project(":core:repositories"))
    api(project(":core:useCases"))
    api(project(":core:viewModels"))
    api(project(":core:local"))
    //endregion

    //region chat
    api(project(":chat:ui"))
    api(project(":chat:viewModels"))
    api(project(":chat:useCases"))
    api(project(":chat:repository"))
    api(project(":chat:remote"))
    api(project(":chat:local"))
    api(project(":chat:firebase"))
    //endregion

    //region identity
    api(project(":identity:ui"))
    api(project(":identity:viewModel"))
    api(project(":identity:useCases"))
    api(project(":identity:repositories"))
    api(project(":identity:remote"))
    api(project(":identity:local"))
    //endregion


    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$gson_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    //hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    //room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    implementation("androidx.compose.runtime:runtime:$compose_ui_version")


    // Coil image
    def coil_version = '2.2.2'
    implementation "io.coil-kt:coil-compose:$coil_version"

    implementation "androidx.navigation:navigation-compose:2.6.0-alpha04"

}